### Added by Zinit's installer
if [[ ! -f $HOME/.local/share/zinit/zinit.git/zinit.zsh ]]; then
    print -P "%F{33} %F{220}Installing %F{33}ZDHARMA-CONTINUUM%F{220} Initiative Plugin Manager (%F{33}zdharma-continuum/zinit%F{220})…%f"
    command mkdir -p "$HOME/.local/share/zinit" && command chmod g-rwX "$HOME/.local/share/zinit"
    command git clone https://github.com/zdharma-continuum/zinit "$HOME/.local/share/zinit/zinit.git" && \
        print -P "%F{33} %F{34}Installation successful.%f%b" || \
        print -P "%F{160} The clone has failed.%f%b"
fi

source "$HOME/.local/share/zinit/zinit.git/zinit.zsh"
autoload -Uz _zinit
(( ${+_comps} )) && _comps[zinit]=_zinit

# Load a few important annexes, without Turbo
# (this is currently required for annexes)
zinit light-mode for \
    zdharma-continuum/zinit-annex-as-monitor \
    zdharma-continuum/zinit-annex-bin-gem-node \
    zdharma-continuum/zinit-annex-patch-dl \
    zdharma-continuum/zinit-annex-rust

### End of Zinit's installer chunk

# PATH
export PATH=$HOME/bin:$PATH              # Home bin Path
export PATH=/usr/local/bin:$PATH         # User local Path
export PATH=$HOME/.local/bin:$PATH       # Home .local Path
export PATH=$HOME/scripts:$PATH          # Home custom scripts Path
export PATH=$HOME/.nimble/bin:$PATH      # Nimble (Nim Package Manager) Path
export PATH=/usr/local/go/bin:$PATH      # Go user Local Path
export PATH=$HOME/go/bin:$PATH           # Go local path
export PATH=$HOME/.emacs.d/bin:$PATH     # Emacs local path
export PATH=$HOME/.cargo/bin:$PATH       # Rust local path
# ~/.tmux/plugins
export PATH=$HOME/.tmux/plugins/t-smart-tmux-session-manager/bin:$PATH
# ~/.config/tmux/plugins
export PATH=$HOME/.config/tmux/plugins/t-smart-tmux-session-manager/bin:$PATH
{{- if eq .chezmoi.os "darwin" }}
export PATH=/opt/homebrew/bin/:$PATH     # Mac homebrew path
export PATH=/usr/local/bin/:$PATH        # Mac usr bin path
export PATH=/Applications/Visual\ Studio\ Code\ -\ Insiders.app/Contents/Resources/app/bin:$PATH        # Mac vscode
{{-  end}}
export PATH=$HOME/progs/:$PATH           # Misc Progs

# Zsh settings
# History Settings
HISTFILE=~/.zsh_history
HISTSIZE=10000
SAVEHIST=10000
setopt appendhistory

# Env Variables
# lesspipe
LESSOPEN="|lesspipe.sh %s"; export LESSOPEN
lessc () {/usr/share/vim/vim90/macros/less.sh "$@"}

EDITOR="nvim"; export EDITOR 

# Theme
PURE_PROMPT_SYMBOL=
PURE_PROMPT_VICMD_SYMBOL=
zinit ice pick'async.zsh' src'pure.zsh'
zinit light sindresorhus/pure

# Completions
autoload -Uz compinit && compinit


# Programs
{{- if eq .chezmoi.os "darwin" }}
zinit lucid light-mode from"gh-r" as"command" bpick'*darwin*' for \
{{- else if eq .chezmoi.os "linux" }}
zinit lucid light-mode from"gh-r" as"command" bpick'*linux*' for \
{{- end}}
    atload'
        eval "$(zoxide init --cmd cd zsh)"
        alias z="__zoxide_z"
    ' pick'zoxide/zoxide' \
        @ajeetdsouza/zoxide \
        @junegunn/fzf \
    mv'ripgrep* -> rg' pick'rg/rg' \
        @BurntSushi/ripgrep \
    mv'fd* -> fd' pick'fd/fd' \
        @sharkdp/fd \
    mv'bat* -> bat' pick'bat/bat' atload'
        export MANPAGER="bat --plain"
    ' \
        @sharkdp/bat \
    mv'delta* -> delta' pick'delta/delta' \
        @dandavison/delta \

# Scripts
zinit lucid light-mode as"command" for \
    id-as"fzf-tmux" sbin"./bin/fzf-tmux" junegunn/fzf \

# Rust
zinit lucid light-mode as"command" for \
    id-as"eza" \
    atclone'cargo install eza' \
    atpull'cargo install eza' \
    atload'
        alias ls="eza"
    ' \
    @zdharma-continuum/null \

# Python stuff
zinit pack"bgn" git for pyenv

zinit wait"1" lucid as"command" for \
    atclone'python3 -m pip install --user pipx; python3 -m pipx ensurepath' \
    atpull'%atclone' \
    atinit'eval "$(register-python-argcomplete pipx)"' \
    id-as"pipx-installer" \
    zdharma-continuum/null

zinit lucid as"command" for \
    id-as"httpie" \
    atclone'pipx install httpie' \
    atpull'pipx upgrade httpie' \
    zdharma-continuum/null \
id-as"pre-commit" \
    atclone'pipx install pre-commit' \
    atpull'pipx upgrade pre-commit' \
    zdharma-continuum/null \
id-as"poetry" \
    atclone'pipx install poetry' \
    atpull'pipx upgrade poetry' \
    zdharma-continuum/null \


# Go
zinit lucid light-mode as"command" for \
  atclone'
    go build -o target/sesh
  ' atpull'
    %atclone
  ' sbin'target/sesh' \
      @joshmedeski/sesh \


setopt promptsubst

zinit lucid for \
    atinit"
        export ZSH_TMUX_FIXTERM=false
        export ZSH_TMUX_AUTOSTART=true
        export ZSH_TMUX_AUTOCONNECT=true
        export ZSH_TMUX_DEFAULT_SESSION_NAME='</>'
    " \
    OMZP::tmux \
    atinit"HIST_STAMPS=dd.mm.yyyy" \
    OMZL::history.zsh \

zinit wait lucid for \
	OMZL::clipboard.zsh \
	OMZL::compfix.zsh \
	OMZL::completion.zsh \
	OMZL::correction.zsh \
    atload'
        alias ..="cd .."
        alias ...="cd ../.."
        alias ....="cd ../../.."
        alias .....="cd ../../../.."

        function take() {
            mkdir -p $@ && cd ${@:$#}
        }

        alias rm="rm -rf"
    ' \
	OMZL::directories.zsh \
	OMZL::git.zsh \
	OMZL::grep.zsh \
	OMZL::key-bindings.zsh \
	OMZL::spectrum.zsh \
	OMZL::functions.zsh \
	OMZL::termsupport.zsh \
    atload"
        alias gcd='git checkout dev'
        alias gce='git commit -a -e'
    " \
	OMZP::git \
  https://github.com/junegunn/fzf/blob/master/shell/key-bindings.zsh \
  https://github.com/junegunn/fzf/blob/master/shell/completion.zsh \



zinit wait lucid for \
    light-mode blockf atpull'zinit creinstall -q .' \
    atinit"
        zstyle ':completion:*' completer _expand _complete _ignored _approximate
        zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}'
        zstyle ':completion:*' menu select=2
        zstyle ':completion:*' select-prompt '%SScrolling active: current selection at %p%s'
        zstyle ':completion:*:descriptions' format '-- %d --'
        zstyle ':completion:*:processes' command 'ps -au$USER'
        zstyle ':completion:complete:*:options' sort false
        zstyle ':fzf-tab:complete:_zlua:*' query-string input
        zstyle ':completion:*:*:*:*:processes' command 'ps -u $USER -o pid,user,comm,cmd -w -w'
        zstyle ':fzf-tab:complete:kill:argument-rest' extra-opts --preview=$extract'ps --pid=$in[(w)1] -o cmd --no-headers -w -w' --preview-window=down:3:wrap
        zstyle ':fzf-tab:complete:cd:*' extra-opts --preview=$extract'exa -1 --color=always ${~ctxt[hpre]}$in'
    " \
        zsh-users/zsh-completions \
    light-mode atinit"ZSH_AUTOSUGGEST_BUFFER_MAX_SIZE=20" atload"_zsh_autosuggest_start" \
        zsh-users/zsh-autosuggestions \
    light-mode atinit"
        typeset -gA FAST_HIGHLIGHT;
        FAST_HIGHLIGHT[git-cmsg-len]=100;
        zpcompinit;
        zpcdreplay;
    " \
        zdharma-continuum/fast-syntax-highlighting \
    reset \
    atclone"local P=${${(M)OSTYPE:#*darwin*}:+g}
            \${P}sed -i \
            '/DIR/c\DIR 38;5;63;1' LS_COLORS; \
            \${P}dircolors -b LS_COLORS > c.zsh" \
    atpull'%atclone' pick"c.zsh" nocompile'!' \
    atload'zstyle ":completion:*" list-colors “${(s.:.)LS_COLORS}”' \
        trapd00r/LS_COLORS


# Aliases
run_tsa() {
  # Run the tmux session script if it exists
    if [[ -z "$TMUX_SESSION_SCRIPT" ]]; then
        echo "TMUX_SESSION_SCRIPT is not set"
    else
        "$TMUX_SESSION_SCRIPT"
    fi
}

{{- if eq .chezmoi.os "darwin" }}
alias cat="bat"
{{- else if eq .chezmoi.os "linux" }}
alias code="code-insiders"
alias cat="batcat"
{{- end }}
alias lg="lazygit"
alias v="nvim"
alias ranger=". ranger"
alias fzh='print -z -- $(cat ~/.zsh_history | fzf)'
alias "docker compose"="docker-compose"
alias "docker-compose"="docker compose"
alias tsa=run_tsa


{{- if eq .chezmoi.os "darwin" }}
# pnpm
export PNPM_HOME="/Users/karim/Library/pnpm"
case ":$PATH:" in
  *":$PNPM_HOME:"*) ;;
  *) export PATH="$PNPM_HOME:$PATH" ;;
esac
# pnpm end
{{- else if eq .chezmoi.os "linux" }}
# pnpm
export PNPM_HOME="/home/karim/.local/share/pnpm"
case ":$PATH:" in
  *":$PNPM_HOME:"*) ;;
  *) export PATH="$PNPM_HOME:$PATH" ;;
esac
# pnpm end
{{- end}}

# bun completions
[ -s "/home/karim/.bun/_bun" ] && source "/home/karim/.bun/_bun"

{{- if not (eq .chezmoi.os "darwin") }}
# 1password completion
eval "$(op completion zsh)"; compdef _op op
{{- end}}

{{- if eq .chezmoi.os "darwin" }}
bindkey '\e[1;9D' backward-word   # Alt/Option + Left Arrow
bindkey '\e[1;9C' forward-word    # Alt/Option + Right Arrow

# Navigate to the beginning or end of the line
bindkey '\e[1;5D' beginning-of-line   # Cmd + Left Arrow
bindkey '\e[1;5C' end-of-line         # Cmd + Right Arrow
{{- end}}
# bun
export BUN_INSTALL="$HOME/.bun"
export PATH="$BUN_INSTALL/bin:$PATH"
